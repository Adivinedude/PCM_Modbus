Setting the device address
	first connect it to a pc, 
	access the serial port, 
	then reset the device
	you have 5 seconds to move the potentiometer, 
		once values begin to print to the serial console 
		set it to the device address you want.
	valid values are 1-32.

The pot can be replaced by a voltage divider circuit to fix the address to a given value.

after setting the address, connect to your modbus client and start controlling the unit.
modbus points are at the end of this document

Order of Operations
	All paramaters should be loaded before setting the enable coil to "HIGH".
	once the enable coil is "HIGH", the unit may ignore any changes to the coils
        and holding registers. These changes will take effect once the enable coil is set
        "LOW". The different motor types will process 'Holding Registers' differently.
        See the specific driver.cpp file for details.

Setting the enable coil to LOW will immedatly stop pumping, reguardless of progress.
This can be done at any time. I strongly recommend that you have a way to stop the pump
manualy. Something like a big red friendly button that says "push to stop"

Using of physical feedback is possible with each pump within the unit.
Feedback signals must be below 2v for logic LOW and above 3.5v for logic HIGH.
Feedback signals must not excede 5V per ATmega328p Specs. See datasheet for more detail.
Feedback pulses should exceed 20ns to ensure the signal will be detected by the hardware

This program was written to be ammended with driver.cpp files to suit your indiviual needs.
I have attempted to design this software to be as versatile as possible.
any aspect of the device can be directly controlled via the motor.cpp structure.
setup_motor - initiate resources for the driver and error check user input.
run_motor   - process speed/direction changes
work_motor  - a callback function that is ran each iteration of the pumping cycle
stop_motor  - cleanup for the driver just before object destructor is called 

Please see PCM_Modbus_Template.txt for simple description of each modbus point
address - Register Type - Function

Pump 1
0x00 - coil - Enable the device. On/Off switch
0x01 - coil - Use Positive Feedback
0x02 - coil - Enable debug/direct control of the motors via communication.
0x03 - coil - Set or invert the direction of the motor
Pump 2
0x04 - coil - Enable the device. On/Off switch
0x05 - coil - Use Positive Feedback
0x06 - coil - Enable debug/direct control of the motors via communication.
0x07 - coil - Set or invert the direction of the motor
Pump 3
0x08 - coil - Enable the device. On/Off switch
0x09 - coil - Use Positive Feedback
0x0a - coil - Enable debug/direct control of the motors via communication.
0x0b - coil - Set or invert the direction of the motor
Pump 4
0x0c - coil - Enable the device. On/Off switch
0x0d - coil - Use Positive Feedback
0x0e - coil - Enable debug/direct control of the motors via communication.
0x0f - coil - Set or invert the direction of the motor

----------

0x00 - d_input - busy  Pump 1
0x01 - d_input - error Pump 1

0x02 - d_input - busy  Pump 2
0x03 - d_input - error Pump 2

0x04 - d_input - busy  Pump 3
0x05 - d_input - error Pump 3

0x06 - d_input - busy  Pump 4
0x07 - d_input - error Pump 4


----------These will vary by motor type selected. 
------DC Motor controlled by H-Bridge

Pump 1
0x00 - h_register - CALIBRATION value. "milliseconds per Unit" or "Pulses per Unit"
0x01 - h_register - DURATION. How many seconds to dispense the dose
0x02 - h_register - DOSE. How many units to dispense
0x03 - h_register - Motor Type. see selected driver for options
Pump 2
0x04 - h_register - CALIBRATION
0x05 - h_register - DURATION
0x06 - h_register - DOSE
0x07 - h_register - Motor Type
Pump 3
0x08 - h_register - CALIBRATION
0x09 - h_register - DURATION
0x0A - h_register - DOSE
0x0B - h_register - Motor Type
Pump 4
0x0C - h_register - CALIBRATION
0x0D - h_register - DURATION
0x0E - h_register - DOSE
0x0F - h_register - Motor Type

----------

Pump 1
0x00 - i_register - TOTAL_FEEDBACK_HIGH
0x01 - i_register - TOTAL_FEEDBACK_LOW
0x02 - i_register - CYCLES remaining for this request
0x03 - i_register - DOSE per cycle for this request
0x04 - i_register - TOTAL units dispensed

Pump 2
0x05 - i_register - TOTAL_FEEDBACK_HIGH
0x06 - i_register - TOTAL_FEEDBACK_LOW
0x07 - i_register - CYCLES
0x08 - i_register - DOSE
0x09 - i_register - TOTAL

Pump 3
0x0a - i_register - TOTAL_FEEDBACK_HIGH
0x0b - i_register - TOTAL_FEEDBACK_LOW
0x0c - i_register - CYCLES
0x0d - i_register - DOSE
0x0e - i_register - TOTAL

Pump 4
0x0f - i_register - TOTAL_FEEDBACK_HIGH
0x10 - i_register - TOTAL_FEEDBACK_LOW
0x11 - i_register - CYCLES
0x12 - i_register - DOSE
0x13 - i_register - TOTAL

----------

Special Registers
0x14 - i_register - FreeRam. ammount of system memory currently available
0x15 - i_register - System Cycles per second. How fast the controller is processing
0x16 - i_register - System Uptime in seconds
